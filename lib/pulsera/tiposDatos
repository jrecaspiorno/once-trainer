List<HealthDataType> types = [
      HealthDataType.WEIGHT,
      HealthDataType.HEIGHT,
      HealthDataType.STEPS,
      HealthDataType.BODY_MASS_INDEX,
      HealthDataType.WAIST_CIRCUMFERENCE, // IOS
      HealthDataType.BODY_FAT_PERCENTAGE,
      HealthDataType.ACTIVE_ENERGY_BURNED,
      HealthDataType.BASAL_ENERGY_BURNED, // IOS
      HealthDataType.HEART_RATE,
      HealthDataType.BLOOD_PRESSURE_SYSTOLIC,
      HealthDataType.BLOOD_PRESSURE_DIASTOLIC,
      HealthDataType.RESTING_HEART_RATE, // IOS
      HealthDataType.WALKING_HEART_RATE, // IOS
      HealthDataType.BLOOD_GLUCOSE,
      HealthDataType.BLOOD_OXYGEN,

      // IOS, requires Apple Watch
      HealthDataType.ELECTRODERMAL_ACTIVITY,
      HealthDataType.HIGH_HEART_RATE_EVENT,
      HealthDataType.LOW_HEART_RATE_EVENT,
      HealthDataType.IRREGULAR_HEART_RATE_EVENT,
    ];

     @override
      Widget build(BuildContext context) {
        return MaterialApp(
            home: Scaffold(
              appBar: AppBar(
                leading: BackButton(
                  onPressed: () {
                    Navigator.pop(context);
                  },
                ),
                title: Text('Prueba pulsera'),
                backgroundColor: Colors.indigo,
              ),
              body: _healthDataList.isEmpty
                  ? Text('$_healthKitOutput\n')
                  : ListView.builder(
                  itemCount: _healthDataList.length,
                  itemBuilder: (_, index) => ListTile(
                    title: Text(
                        "${_healthDataList[index].dataType.toString()}: ${_healthDataList[index].value.toString()}"),
                    trailing: Text('${_healthDataList[index].unit}'),
                    subtitle: Text(
                        '${DateTime.fromMillisecondsSinceEpoch(_healthDataList[index].dateFrom)} - ${DateTime.fromMillisecondsSinceEpoch(_healthDataList[index].dateTo)}'),
                  )),
            )
        );
      }


      // Pruebas
      types.add(HealthDataType.WEIGHT);
      types.insert(180, HealthDataType.WEIGHT);
      bool weightAvailable = Health.isDataTypeAvailable(HealthDataType.WEIGHT);
      debugPrint(weightAvailable.toString());